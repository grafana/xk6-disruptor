name: publish 

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version of the release in semver format. If it is a development release append a build metadata (e.g. v0.38.0-dev).'
        required: true
  push:
    branches:
      - main
    tags:
      - v*

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: grafana/xk6-disruptor-agent

jobs:
  publish-agent-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get image version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              IMAGE_VERSION="${{ github.event.inputs.version }}"
          elif [[ "$GITHUB_REF_TYPE" == "tag" ]]; then
             IMAGE_VERSION=$GITHUB_REF_NAME
          else
             IMAGE_VERSION="latest"
          fi
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
      - name: Build
        run: |
          CGO_ENABLED=0 
          go build -o images/agent/build/xk6-disruptor-agent ./cmd/agent
          docker build -t $IMAGE_NAME images/agent
      - name: Log into ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish latest agent image to ghcr.io
        env:
          IMAGE_VERSION: ${{ env.IMAGE_VERSION }}
        run: |
          IMAGE_TAG="$REGISTRY/$IMAGE_NAME:$IMAGE_VERSION"
          docker tag $IMAGE_NAME $IMAGE_TAG
          docker push $IMAGE_TAG

  build-linux-packages:
      runs-on: ubuntu-latest
      permissions:
        contents: read
        packages: write
      steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: get go version
        run: |
          GO_VERSION=$(cat go.mod | grep -e "^go 1\.[0-9]*" | cut -d' ' -f 2)
          echo "GO_VERSION=$GO_VERSION" >> $GITHUB_ENV
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install xk6 (k6 extension builder)
        run: |
          go install go.k6.io/xk6/cmd/xk6@latest
      - name: Install nfpm (dep and rpm package builder)
        run: |
          go install github.com/goreleaser/nfpm/v2/cmd/nfpm@v2.16.0
      - name: get package version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              VERSION="${{ github.event.inputs.version }}"
          elif [[ "$GITHUB_REF_TYPE" == "tag" ]]; then
              VERSION=$GITHUB_REF_NAME
          else
              VERSION=""
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: build and package
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          COMMIT="$(git rev-parse --short HEAD)"
          PKG_VERSION=${VERSION:-dev-$COMMIT}
          ./build-package.sh -v $PKG_VERSION all
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: dist/
          retention-days: 7

  release-packages:
    runs-on: ubuntu-latest
    needs: [build-linux-packages]
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: get release version
        run: |
          VERSION=$GITHUB_REF_NAME
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries
          path: dist
      - name: Generate checksum file
        env:
           VERSION: ${{ env.VERSION }}
        run: sha256sum dist/* > "xk6-disruptor-${VERSION}-checksums.txt"
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
        run: |
          MESSAGE="$(cat ./releases/${VERSION}.md)"
          assets=()
          for asset in ./dist/*; do
            assets+=("-a" "$asset")
          done
          hub release create "${assets[@]}" -m "$VERSION" -m "$MESSAGE" "$VERSION"
          
